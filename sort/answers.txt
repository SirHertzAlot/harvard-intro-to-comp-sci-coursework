sort1 uses: Bubble Sort

time ./sort1 random50000.txt

real    0m5.819s
user    0m5.149s
sys     0m0.267s

time ./sort1 random5000.txt

real    0m0.077s
user    0m0.031s
sys     0m0.031s

How do you know?: This sort seems to work really quickly with already sorted datasets. 
sort2 uses: Merge Sort

time ./sort2 random50000.txt

real    0m0.603s
user    0m0.030s
sys     0m0.245s

time ./sort2 random5000.txt

real    0m0.049s
user    0m0.004s
sys     0m0.028s

time ./sort2 reversed5000.txt

real    0m0.070s
user    0m0.003s
sys     0m0.030s

time ./sort2 reversed50000.txt

real    0m0.757s
user    0m0.011s
sys     0m0.269s

How do you know?: Time complexity doesn't seem to charge very much even when increasing the inputs or when fuzzing or scrambling the inputs. Merge Sort maintains a stable time complexity
even when the inputs increase or become fuzzed via randomization, etc.

sort3 uses: Selection sort

time ./sort3 sorted50000.txt

real    0m2.592s
user    0m1.853s
sys     0m0.262s

time ./sort3 random50000.txt

real    0m2.374s
user    0m1.757s
sys     0m0.268s

time ./sort3 random5000.txt

real    0m0.052s
user    0m0.019s
sys     0m0.027s

time ./sort3 reversed50000.txt

real    0m2.850s
user    0m2.089s
sys     0m0.264s

time ./sort3 reversed5000.txt

real    0m0.089s
user    0m0.023s
sys     0m0.033s

How do you know?: Algorithm has to go through array even if it's already sorted and is much slower than Sort 1.
